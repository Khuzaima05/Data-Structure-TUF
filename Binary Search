
 
Que: https://leetcode.com/problems/binary-search/

int binary_recursive(vector<int>& v,int low, int high, int target)
    {
        if(low>high)
        return -1;
        int mid= low+(high-low)/2;
        if(v[mid]==target)
        return mid;
        else if(v[mid]>target)
        return binary(v,low,mid-1,target);
        else if(v[mid]<target)
        return binary(v,mid+1,high,target);  
        return -1;
    }
    
    int binary_iterative(vector<int>& nums, int target) 
    {
       int n=nums.size();
        int low=0;
        int high=n-1;
        while(high>=low)
        {
            int mid= low+(high-low)/2;
            if(nums[mid]==target)
            return mid;
            else if(nums[mid]>target)
            high=mid-1;
            else if(nums[mid]<target)
            low=mid+1;
        }
        return -1;
        
    }

    

    Topic: Upper and Lower Bound
    Concept	What It Finds	Returns Index Of
Lower Bound	First index where value â‰¥ target (greater or equal)	Target itself or next bigger number
Upper Bound	First index where value > target (strictly greater)	Just bigger number


    Que: https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/

    

    int lower_bound(vector<int>& v, int x)
    {
        int low=0;
        int high=v.size()-1;
        int ans=-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(x<=v[mid])
            {
                high=mid-1;
                if(x==v[mid])
                ans=mid;
            }
            else
            {
                low=mid+1;
            }

        }
        return ans;   
    }

    int upper_bound(vector<int>& v, int x)
    {
        int low=0;
        int high=v.size()-1;
        int ans=-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(x<v[mid])
            {
                high=mid-1;
            }
            else
            {
                if (v[mid] == x)
                ans = mid;
                low=mid+1;
            }

        }
        return ans;   

    }
    vector<int> searchRange(vector<int>& nums, int target) 
    {
        vector<int> ans;
        ans.push_back(lower_bound(nums, target));
        ans.push_back(upper_bound(nums, target));
        return ans;
    }
